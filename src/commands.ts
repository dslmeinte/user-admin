import {isBoolean, isObject, isString} from "lodash";

import {EventType} from "./events";


export type Command = ICreateUserCommand | ICreateGroupCommand | IAddIdentityToGroupCommand;

export type CommandType = EventType;


export /* abstract */ interface ICommand {
    commandType: CommandType;
}

export interface IAddIdentityToGroupCommand extends ICommand {
    commandType: "addIdentityToGroup";
    groupId: string;
    memberId: string;
    asAdmin: boolean;
}

export /* abstract */ interface ICreateIdentityCommand extends ICommand {
    name: string;
    publicId: any;
}

export interface ICreateGroupCommand extends ICreateIdentityCommand {
    commandType: "createGroup";
}

export interface ICreateUserCommand extends ICreateIdentityCommand {
    commandType: "createUser";
    emailAddress: string;
    password: string;
}


/**
 * Performs a basic syntax check of commands.
 * This is necessary since commands can come from un-/semi-trusted sources.
 * Events are considered to be generated by ourselves, so don't require syntax validation.
 */
export function validateSyntax(object: any): string[] {

    const messages: string[] = [];

    function checkString<T extends Command>(propertyName: keyof T) {
        const value = object[propertyName];
        if (!isString(value) || !value) {
            messages.push(`'${propertyName}' not valid`);
        }
    }

    if (isObject(messages)) {
        switch (object.commandType) {
            case "addIdentityToGroup": {
                checkString<IAddIdentityToGroupCommand>("groupId");
                checkString<IAddIdentityToGroupCommand>("memberId");
                if (!isBoolean(object.asAdmin)) {
                    messages.push("'asAdmin' not valid");
                }
                break;
            }
            case "createGroup": {
                checkString<ICreateGroupCommand>("name");
                checkString<ICreateGroupCommand>("publicId");
                break;
            }
            case "createUser": {
                checkString<ICreateUserCommand>("name");
                checkString<ICreateUserCommand>("publicId");
                checkString<ICreateUserCommand>("emailAddress");
                checkString<ICreateUserCommand>("password");
                break;
            }
            default: {
                messages.push("'commandType' not valid");
            }
        }
    } else {
        messages.push("not an object");
    }

    return messages;
}

// TODO  replace with JSON Schema check

